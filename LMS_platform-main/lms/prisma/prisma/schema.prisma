generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String       @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean      @default(false)
  categoryId  String?
  createdAt   DateTime     @default(now())
  chapters Chapter[]
  purchases   Purchase[]
  updateAt    DateTime     @updatedAt
  attachments Attachment[]
  category    Category?    @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}
model Chapter{
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  muxData MuxData?
  courseId String
  course Course @relation(fields: [courseId], references: [id],onDelete: Cascade)
  useProgress UserProgress[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([courseId])
}
model MuxData{
  id String @id @default(uuid())
  assetId String
  playbackId String?
  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id],onDelete: Cascade)
}
model UserProgress{
  id String @id @default(uuid())
  userId String
  chapterId String
  chapter Chapter @relation(fields: [chapterId],references: [id],onDelete: Cascade)
  isCompleted Boolean @default(false)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([chapterId])
  @@index([userId,chapterId])
}

model Purchase{
  id String @id @default(uuid())
  userId String
  courseId String
  course Course @relation(fields: [courseId],references: [id],onDelete: Cascade)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([courseId])
}

model StripeCustomer{
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}